// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChallengeType {
  DAILY
  CUMULATIVE
}

model Challenge {
  id                        Int          @id @default(autoincrement())
  name                      String       @unique
  startedTime              DateTime?
  endedTime                DateTime?
  challengeType            ChallengeType
  challengeMinimumTime     Int
  challengeEditorConstraint String?
  challengeLanguageConstraint String?
  challengeMinimumTeamSize  Int         @default(0)
  teams                     ChallengeTeam[] @relation("ChallengeTeams")
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
}

model Person {
  id          Int      @id @default(autoincrement())
  slackId     String   @unique
  slackHandle String
  admin       Boolean  @default(false)
  teams       ChallengeParticipant[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChallengeTeam {
    id          Int      @id @default(autoincrement())
    joinCode    String
    challenge   Challenge @relation("ChallengeTeams", fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId Int
    members     ChallengeParticipant[] @relation("TeamParticipants")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([challengeId, joinCode])
}

model ChallengeParticipant {
    id        Int      @id @default(autoincrement())
    team      ChallengeTeam @relation("TeamParticipants", fields: [teamId], references: [id], onDelete: Cascade)
    teamId    Int
    person    Person @relation(fields: [personId], references: [id])
    personId  Int
    timezone  String
    dailySummaries ChallengeParticipantDailyHackatimeSummary[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([teamId, personId])
}

model ChallengeParticipantDailyHackatimeSummary {
    date               DateTime            @db.Date
    challengeParticipant ChallengeParticipant @relation(fields: [challengeParticipantId], references: [id], onDelete: Cascade)
    challengeParticipantId Int
    timezone           String
    jsonLastUpdated    DateTime
    json              Json

    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt

    @@id([date, challengeParticipantId])
}
